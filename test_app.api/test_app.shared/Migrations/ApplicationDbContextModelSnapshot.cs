// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using test_app.shared;
using test_app.shared.Data;

namespace test_app.shared.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("test_app.shared.Data.Application", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DailyBonusCaseId");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsInitialized");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("test_app.shared.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<decimal>("Balance");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("SteamAvatar");

                    b.Property<string>("SteamId");

                    b.Property<int>("SteamProfileState");

                    b.Property<string>("SteamUsername");

                    b.Property<string>("TradeofferUrl");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("test_app.shared.Data.Bot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsAdminsOnly");

                    b.Property<bool>("IsAwaiting");

                    b.Property<bool>("IsHidden");

                    b.Property<string>("Login");

                    b.Property<string>("Server");

                    b.Property<string>("SteamId");

                    b.Property<DateTime>("SyncTime");

                    b.Property<string>("Token");

                    b.Property<string>("TradeOffer");

                    b.HasKey("Id");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("test_app.shared.Data.BotsPurcasesFullHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BotId");

                    b.Property<DateTime>("BoughtAt");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ListedAt");

                    b.Property<string>("MarketHashName");

                    b.Property<string>("Platform");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.HasIndex("BotId");

                    b.ToTable("BotsPurcasesFullHistory");
                });

            modelBuilder.Entity("test_app.shared.Data.BotTradeoffer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BotId");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateExpiration");

                    b.Property<DateTime>("DateInsertion");

                    b.Property<DateTime>("DateUpdate");

                    b.Property<long>("ItemsToGive");

                    b.Property<long>("SteamIdOther");

                    b.Property<long?>("StockItemId");

                    b.Property<long?>("TradeId");

                    b.Property<int>("TradeOfferState");

                    b.Property<long?>("TradeofferId");

                    b.HasKey("Id");

                    b.HasIndex("BotId");

                    b.HasIndex("StockItemId");

                    b.ToTable("BotTradeoffers");
                });

            modelBuilder.Entity("test_app.shared.Data.Case", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CategoryId");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FullName");

                    b.Property<string>("Image");

                    b.Property<int>("Index");

                    b.Property<bool>("IsAvalible");

                    b.Property<decimal?>("PreviousPrice");

                    b.Property<decimal>("Price");

                    b.Property<string>("StaticName");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("test_app.shared.Data.CaseCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FullName");

                    b.Property<int>("Index");

                    b.Property<string>("StaticName");

                    b.HasKey("Id");

                    b.ToTable("CaseCategories");
                });

            modelBuilder.Entity("test_app.shared.Data.CaseDiscount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CaseId");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("Percent");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("UserId");

                    b.ToTable("CaseDiscounts");
                });

            modelBuilder.Entity("test_app.shared.Data.CaseFaultLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CaseId");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Text");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("UserId");

                    b.ToTable("CaseFaultLogs");
                });

            modelBuilder.Entity("test_app.shared.Data.CasesDrop", b =>
                {
                    b.Property<long>("CaseId");

                    b.Property<long>("SkinId");

                    b.Property<decimal>("Chance")
                        .HasColumnType("decimal(9, 8)");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("CaseId", "SkinId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("SkinId");

                    b.ToTable("CasesDrops");
                });

            modelBuilder.Entity("test_app.shared.Data.CaseSellLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("Price");

                    b.Property<long?>("SkinId");

                    b.Property<string>("Source");

                    b.Property<string>("UserId");

                    b.Property<long?>("WinnerId");

                    b.HasKey("Id");

                    b.HasIndex("SkinId");

                    b.HasIndex("UserId");

                    b.HasIndex("WinnerId");

                    b.ToTable("CaseSellLogs");
                });

            modelBuilder.Entity("test_app.shared.Data.G2AIPNLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Request");

                    b.Property<string>("Response");

                    b.HasKey("Id");

                    b.ToTable("G2AIPNLogs");
                });

            modelBuilder.Entity("test_app.shared.Data.G2APayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Currency");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Status");

                    b.Property<decimal>("Sum");

                    b.Property<string>("TransactionId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("G2APayments");
                });

            modelBuilder.Entity("test_app.shared.Data.PurchasebotPurchases", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BotId");

                    b.Property<long?>("BotQueueId");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("MarketHashName");

                    b.Property<string>("Platform");

                    b.Property<decimal>("PriceUSD");

                    b.HasKey("Id");

                    b.HasIndex("BotId");

                    b.HasIndex("BotQueueId");

                    b.ToTable("PurchasebotPurchases");
                });

            modelBuilder.Entity("test_app.shared.Data.PurshaseBotQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateLastRequest");

                    b.Property<long?>("LastBotId");

                    b.Property<bool>("Locked");

                    b.Property<string>("MarketHashName");

                    b.Property<decimal>("MaxPriceUsd");

                    b.Property<int>("TriesCount");

                    b.HasKey("Id");

                    b.HasIndex("LastBotId");

                    b.ToTable("PurshaseBotQueues");
                });

            modelBuilder.Entity("test_app.shared.Data.Skin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Image");

                    b.Property<string>("MarketHashName");

                    b.Property<decimal>("Price");

                    b.Property<string>("RarityString")
                        .HasColumnName("Rarity");

                    b.Property<long?>("StackCaseId");

                    b.Property<string>("SteamAnalystUrl");

                    b.Property<string>("SteamUrl");

                    b.HasKey("Id");

                    b.HasIndex("StackCaseId");

                    b.HasIndex("Id", "MarketHashName")
                        .IsUnique();

                    b.ToTable("Skins");
                });

            modelBuilder.Entity("test_app.shared.Data.StackCase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.ToTable("StackCases");
                });

            modelBuilder.Entity("test_app.shared.Data.StackCaseSkin", b =>
                {
                    b.Property<long>("StackCaseId");

                    b.Property<long>("SkinId");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("StackCaseId", "SkinId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("SkinId");

                    b.ToTable("StackCaseSkins");
                });

            modelBuilder.Entity("test_app.shared.Data.Stock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BotId");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("SkinId");

                    b.HasKey("Id");

                    b.HasIndex("BotId");

                    b.HasIndex("SkinId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("test_app.shared.Data.Winner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CaseId");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("SkinId");

                    b.Property<int>("State");

                    b.Property<long?>("StockId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("SkinId");

                    b.HasIndex("StockId");

                    b.HasIndex("UserId");

                    b.ToTable("Winners");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("test_app.shared.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("test_app.shared.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("test_app.shared.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("test_app.shared.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("test_app.shared.Data.BotsPurcasesFullHistory", b =>
                {
                    b.HasOne("test_app.shared.Data.Bot", "Bot")
                        .WithMany()
                        .HasForeignKey("BotId");
                });

            modelBuilder.Entity("test_app.shared.Data.BotTradeoffer", b =>
                {
                    b.HasOne("test_app.shared.Data.Bot", "Bot")
                        .WithMany()
                        .HasForeignKey("BotId");

                    b.HasOne("test_app.shared.Data.Stock", "StockItem")
                        .WithMany("Tradeoffers")
                        .HasForeignKey("StockItemId");
                });

            modelBuilder.Entity("test_app.shared.Data.Case", b =>
                {
                    b.HasOne("test_app.shared.Data.CaseCategory", "Category")
                        .WithMany("Cases")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("test_app.shared.Data.CaseDiscount", b =>
                {
                    b.HasOne("test_app.shared.Data.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("test_app.shared.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("test_app.shared.Data.CaseFaultLog", b =>
                {
                    b.HasOne("test_app.shared.Data.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("test_app.shared.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("test_app.shared.Data.CasesDrop", b =>
                {
                    b.HasOne("test_app.shared.Data.Case", "Case")
                        .WithMany("CaseSkins")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("test_app.shared.Data.Skin", "Skin")
                        .WithMany("CaseSkins")
                        .HasForeignKey("SkinId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("test_app.shared.Data.CaseSellLog", b =>
                {
                    b.HasOne("test_app.shared.Data.Skin", "Skin")
                        .WithMany()
                        .HasForeignKey("SkinId");

                    b.HasOne("test_app.shared.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("test_app.shared.Data.Winner", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");
                });

            modelBuilder.Entity("test_app.shared.Data.G2APayment", b =>
                {
                    b.HasOne("test_app.shared.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("test_app.shared.Data.PurchasebotPurchases", b =>
                {
                    b.HasOne("test_app.shared.Data.Bot", "Bot")
                        .WithMany()
                        .HasForeignKey("BotId");

                    b.HasOne("test_app.shared.Data.PurshaseBotQueue", "BotQueue")
                        .WithMany()
                        .HasForeignKey("BotQueueId");
                });

            modelBuilder.Entity("test_app.shared.Data.PurshaseBotQueue", b =>
                {
                    b.HasOne("test_app.shared.Data.Bot", "LastBot")
                        .WithMany()
                        .HasForeignKey("LastBotId");
                });

            modelBuilder.Entity("test_app.shared.Data.Skin", b =>
                {
                    b.HasOne("test_app.shared.Data.StackCase")
                        .WithMany("Skins")
                        .HasForeignKey("StackCaseId");
                });

            modelBuilder.Entity("test_app.shared.Data.StackCaseSkin", b =>
                {
                    b.HasOne("test_app.shared.Data.Skin", "Skin")
                        .WithMany("StackCaseSkins")
                        .HasForeignKey("SkinId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("test_app.shared.Data.StackCase", "StackCase")
                        .WithMany()
                        .HasForeignKey("StackCaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("test_app.shared.Data.Stock", b =>
                {
                    b.HasOne("test_app.shared.Data.Bot", "Bot")
                        .WithMany()
                        .HasForeignKey("BotId");

                    b.HasOne("test_app.shared.Data.Skin", "Skin")
                        .WithMany()
                        .HasForeignKey("SkinId");
                });

            modelBuilder.Entity("test_app.shared.Data.Winner", b =>
                {
                    b.HasOne("test_app.shared.Data.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("test_app.shared.Data.Skin", "Skin")
                        .WithMany()
                        .HasForeignKey("SkinId");

                    b.HasOne("test_app.shared.Data.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId");

                    b.HasOne("test_app.shared.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
